use serde::{Serialize, Deserialize};
use serde_toml::TomlDeserializer;

#[derive(Deserialize)]
struct FeedConfig {
    url: String,
    title: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct Item {
    title: String,
    link: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct Feed {
    title: String,
    item: Vec<Item>,
}

#[derive(Serialize, Deserialize, Debug)]
struct Rss {
    channel: Feed,
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {

    let toml_string = std::fs::read_to_string("third_eye.toml").unwrap();
    let mut deserializer = TomlDeserializer::new(toml_string);
    let feeds: Vec<FeedConfig> = deserializer.deserialize().unwrap();


    let resp = reqwest::get("https://hnrss.org/newest")
        .await?
        .text()
        .await?;


    let rss: Rss = serde_xml_rs::from_str(&resp)?;

    println!("===== HN Newest Posts =====");

    for item in rss.channel.item {
        println!("* {}: {}", item.title, item.link);
    }

    Ok(())
}
